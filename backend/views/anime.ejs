<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Habilita View Transitions -->
    <meta name="view-transition" content="same-origin">
    <title>Detalles del Anime</title> <!-- Título dinámico sería mejor -->
    <style>
        /* --- ESTILOS BÁSICOS (Similares a los anteriores) --- */
        :root {
            /* Variables CSS para consistencia */
            --primary-color: #007bff;
            --light-gray: #f8f9fa;
            --medium-gray: #e0e0e0;
            --dark-gray: #333;
            --card-bg: #fff;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --hover-shadow-color: rgba(0, 0, 0, 0.15);
            --border-radius: 12px;
            --focus-outline-color: #0056b3;
        }

        body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            background-color: var(--light-gray);
            color: var(--dark-gray);
            margin: 0;
            padding: 0;
            line-height: 1.6;
        }

        .container {
            max-width: 900px;
            margin: 2rem auto;
            padding: 2rem;
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .loading-indicator,
        .error-message,
        .no-results {
            text-align: center;
            padding: 2rem;
            font-size: 1.1rem;
            color: #6c757d;
        }

        .error-message {
            color: #dc3545;
            font-weight: 500;
        }

        /* --- Estilos para la cabecera del Anime --- */
        .anime-header {
            display: flex;
            flex-direction: column;
            /* Stack image and title on small screens */
            align-items: center;
            gap: 1.5rem;
            margin-bottom: 2rem;
            /* Nombre de transición para el contenedor principal (coincide con el de la tarjeta <a>) */
            view-transition-name: var(--anime-card-transition-name);
            contain: layout;
            /* Ayuda a la transición */
        }

        .anime-header img {
            width: 100%;
            max-width: 250px;
            /* Límite de tamaño para la imagen */
            height: auto;
            aspect-ratio: 262.25 / 373.19;
            /* Mantener proporción */
            object-fit: cover;
            border-radius: var(--border-radius);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            /* Nombre de transición para la imagen (coincide con el de la <img> en index.html) */
            view-transition-name: var(--anime-image-transition-name);
        }

        .anime-header h1 {
            font-size: 2.2rem;
            margin: 0;
            text-align: center;
            /* Nombre de transición para el título (coincide con el del h3 en index.html) */
            view-transition-name: var(--anime-title-transition-name);
        }

        @media (min-width: 600px) {
            .anime-header {
                flex-direction: row;
                /* Lado a lado en pantallas más grandes */
                text-align: left;
            }

            .anime-header h1 {
                text-align: left;
            }
        }

        /* --- Estilos para la lista de episodios y botones --- */
        .episodes-section h2 {
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            border-bottom: 2px solid var(--medium-gray);
            padding-bottom: 0.5rem;
        }

        .list-container {
            max-height: 50vh;
            overflow-y: auto;
            margin-bottom: 1.5rem;
            padding-right: 10px;
            /* Espacio para scrollbar */
        }

        .list-item-btn {
            appearance: none;
            background: none;
            border: 1px solid var(--medium-gray);
            display: block;
            width: 100%;
            padding: 0.8rem 1rem;
            margin: 0.5rem 0;
            cursor: pointer;
            color: var(--primary-color);
            border-radius: 8px;
            text-align: left;
            font-size: 1rem;
            transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
        }

        .list-item-btn:hover {
            background-color: #e9ecef;
            color: var(--focus-outline-color);
            border-color: #ced4da;
        }

        .list-item-btn:focus-visible {
            outline: 2px solid var(--focus-outline-color);
            outline-offset: 1px;
            background-color: #e9ecef;
            border-color: var(--focus-outline-color);
        }

        /* --- Estilos de Modales y Reproductor (COPIADOS de la versión anterior mejorada) --- */
        .modal-overlay {
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0s linear 0.3s;
            z-index: 100;
        }

        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
            transition: opacity 0.3s ease;
        }

        .modal {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: 2rem;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transform: translateY(-20px);
            transition: transform 0.3s ease;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-overlay.show .modal {
            transform: translateY(0);
        }

        .modal h2 {
            margin-top: 0;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
            text-align: center;
        }

        .modal .list-container {
            max-height: 50vh;
            overflow-y: auto;
            margin-bottom: 1.5rem;
        }

        .close-btn {
            background-color: var(--primary-color);
            color: #fff;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            display: block;
            margin: 1.5rem auto 0;
            transition: background-color 0.2s ease;
        }

        .close-btn:hover {
            background-color: var(--focus-outline-color);
        }

        .close-btn:focus-visible {
            outline: 3px solid var(--focus-outline-color);
            outline-offset: 2px;
        }

        #videoPlayerContainer {
            display: none;
            position: fixed;
            inset: 0;
            background-color: black;
            z-index: 1000;
        }

        #videoPlayer {
            width: 100%;
            height: 100%;
            border: none;
        }

        #closeVideoBtn {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(30, 30, 30, 0.7);
            color: white;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            line-height: 1;
            transition: background-color 0.2s ease;
            padding: 0;
        }

        #closeVideoBtn:hover {
            background-color: rgba(255, 0, 0, 0.8);
        }

        #closeVideoBtn:focus-visible {
            outline: 3px solid white;
            outline-offset: 2px;
        }

        .back-link {
            display: inline-block;
            margin-bottom: 1.5rem;
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
        }

        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>

<body>
    <div class="container">
        <a href="/" class="back-link">← Volver a la búsqueda</a>

        <div id="animeDetailHeader" class="anime-header">
            <!-- La imagen y el título se cargarán aquí dinámicamente -->
            <img id="animeImage" src="<%=image%>" alt="">
            <h1 id="animeTitle">
                <%= title %>
            </h1>
        </div>

        <section class="episodes-section">
            <h2>Episodios</h2>
            <div id="episodesList" class="list-container">
                <!-- <div class="loading-indicator">Cargando episodios...</div> -->
                <%for (episode of episodes){ %>

                    <button type="button" class="list-item-btn"
                        onclick="loadProviders('<%=slug%>', '<%=episode.nro%>')">
                        Episodio <%=episode.nro%>
                    </button>
                    <% }%>
            </div>
        </section>
    </div>

    <!-- Modal para mostrar proveedores (igual que antes) -->
    <div id="providerModalOverlay" class="modal-overlay" aria-hidden="true">
        <div class="modal" role="dialog" aria-modal="true" aria-labelledby="providerModalTitle">
            <h2 id="providerModalTitle">Selecciona un proveedor</h2>
            <div class="list-container" id="providersList"></div>
            <button type="button" class="close-btn" onclick="closeProviderModal()">Cerrar</button>
        </div>
    </div>

    <!-- Contenedor del reproductor de video (igual que antes) -->
    <div id="videoPlayerContainer">
        <button type="button" id="closeVideoBtn" onclick="closeVideo()" aria-label="Cerrar reproductor">✖</button>
        <iframe id="videoPlayer" allowfullscreen sandbox="allow-scripts allow-same-origin"
            title="Reproductor de video"></iframe>
    </div>

    <script>
        // --- Elementos DOM ---
        const animeDetailHeader = document.getElementById('animeDetailHeader');
        const animeImage = document.getElementById('animeImage');
        const animeTitleElement = document.getElementById('animeTitle');
        const episodesList = document.getElementById('episodesList');
        const providerModalOverlay = document.getElementById('providerModalOverlay');
        const providerModalTitle = document.getElementById('providerModalTitle');
        const providersList = document.getElementById('providersList');
        const videoPlayerContainer = document.getElementById('videoPlayerContainer');
        const videoPlayer = document.getElementById('videoPlayer');

        let lastFocusedElement = null;
        let currentAnimeSlug = ''; // Guardar el slug actual

        // --- Funciones de Modales y Reproductor (COPIADAS de la versión anterior mejorada) ---
        const openProviderModal = (episodeIdentifier) => {
            lastFocusedElement = document.activeElement;
            providerModalTitle.textContent = `Proveedores para Episodio ${episodeIdentifier}`;
            providerModalOverlay.setAttribute('aria-hidden', 'false');
            providerModalOverlay.classList.add('show');
            providerModalOverlay.querySelector('.close-btn').focus();
        };

        const closeProviderModal = () => {
            providerModalOverlay.classList.remove('show');
            providerModalOverlay.setAttribute('aria-hidden', 'true');
            providersList.innerHTML = '';
            if (lastFocusedElement) lastFocusedElement.focus();
        };

        providerModalOverlay.addEventListener('click', (e) => {
            if (e.target === providerModalOverlay) closeProviderModal();
        });

        const playVideo = (url, providerTitle) => {
            closeProviderModal();
            lastFocusedElement = document.activeElement; // Guardar foco antes de abrir video
            videoPlayer.src = url;
            videoPlayer.setAttribute('title', `Reproductor - ${providerTitle || 'Video'}`);
            videoPlayerContainer.style.display = 'block';
            videoPlayerContainer.querySelector('#closeVideoBtn').focus();
        };

        const closeVideo = () => {
            videoPlayerContainer.style.display = 'none';
            videoPlayer.src = "";
            videoPlayer.removeAttribute('title');
            if (lastFocusedElement) lastFocusedElement.focus();
        };

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (providerModalOverlay.classList.contains('show')) closeProviderModal();
                if (videoPlayerContainer.style.display === 'block') closeVideo();
            }
        });


        // // --- Lógica de Carga de Episodios y Proveedores ---
        // const loadEpisodes = async (animeSlug) => {
        //     episodesList.innerHTML = '<div class="loading-indicator">Cargando episodios...</div>';
        //     try {
        //         const response = await fetch(`/anime/episode/${animeSlug}`);
        //         if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        //         const episodes = await response.json();

        //         if (episodes.length === 0) {
        //             episodesList.innerHTML = '<div class="no-results">No se encontraron episodios.</div>';
        //         } else {
        //             episodesList.innerHTML = episodes.map(episode => `
        //                 <button type="button" class="list-item-btn" onclick="loadProviders('${animeSlug}', '${episode[0]}')">
        //                     Episodio ${episode[0]}
        //                 </button>
        //             `).join('');
        //         }
        //     } catch (error) {
        //         console.error("Error fetching episodes:", error);
        //         episodesList.innerHTML = '<div class="error-message">Error al cargar los episodios.</div>';
        //     }
        // };

        const loadProviders = async (animeSlug, episodeId) => {
            openProviderModal(episodeId);
            providersList.innerHTML = '<div class="loading-indicator">Cargando proveedores...</div>';
            try {
                const response = await fetch(`/video/${animeSlug}/${episodeId}`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const providers = await response.json();

                if (providers.length === 0) {
                    providersList.innerHTML = '<div class="no-results">No hay proveedores disponibles.</div>';
                } else {
                    providersList.innerHTML = providers.map(provider => `
                        <button type="button" class="list-item-btn" onclick="playVideo('${provider.code}', '${provider.title}')">
                           ${provider.title}
                        </button>
                    `).join('');
                }
            } catch (error) {
                console.error("Error fetching providers:", error);
                providersList.innerHTML = '<div class="error-message">Error al cargar proveedores.</div>';
            }
        };


        // // --- Inicialización de la Página ---
        // document.addEventListener('DOMContentLoaded', () => {
        //     const params = new URLSearchParams(window.location.search);
        //     const slug = params.get('slug');
        //     const title = params.get('title');
        //     const imageUrl = params.get('image');

        //     if (!slug) {
        //         animeTitleElement.textContent = 'Error: Anime no especificado';
        //         episodesList.innerHTML = '<div class="error-message">Falta información para cargar el anime. Vuelve a la búsqueda.</div>';
        //         // Ocultar imagen si no hay slug
        //         if (animeImage) animeImage.style.display = 'none';
        //         return;
        //     }

        //     currentAnimeSlug = slug; // Guardar slug globalmente si es necesario

        //     // Decodificar valores (importante)
        //     const decodedTitle = title ? decodeURIComponent(title) : 'Detalles del Anime';
        //     const decodedImageUrl = imageUrl ? decodeURIComponent(imageUrl) : '/placeholder.png'; // Imagen por defecto

        //     // Establecer título e imagen
        //     document.title = decodedTitle; // Actualizar título de la pestaña
        //     animeTitleElement.textContent = decodedTitle;
        //     if (animeImage) {
        //         animeImage.src = decodedImageUrl;
        //         animeImage.alt = decodedTitle; // Alt text descriptivo
        //     } else {
        //         console.warn("Elemento #animeImage no encontrado");
        //     }


        //     // *** Aplicar los nombres de View Transition ***
        //     // Estos nombres deben coincidir exactamente con los generados en index.html
        //     const cardTransitionName = `anime-card-${slug}`;
        //     const imageTransitionName = `anime-image-${slug}`;
        //     const titleTransitionName = `anime-title-${slug}`;

        //     if (animeDetailHeader) animeDetailHeader.style.viewTransitionName = cardTransitionName;
        //     if (animeImage) animeImage.style.viewTransitionName = imageTransitionName;
        //     if (animeTitleElement) animeTitleElement.style.viewTransitionName = titleTransitionName;


        //     // Cargar episodios
        //     loadEpisodes(slug);
        // });

    </script>
</body>

</html>